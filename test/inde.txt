// import { Strategy, ZkIdentity } from "@zk-kit/identity";
// import { generateMerkleProof, Semaphore } from "@zk-kit/protocols";
// import { expect } from "chai";
import { Strategy, ZkIdentity } from "@zk-kit/identity";
import { IncrementalMerkleTree } from "@zk-kit/incremental-merkle-tree";
import { generateMerkleProof, Semaphore } from "@zk-kit/protocols";
import { poseidon } from "circomlibjs";
import {
  Contract,
  providers,
  utils,
  //  Signer
} from "ethers";
import { run } from "hardhat";
import { parseIdArr, formatId } from "../utils/convertId";
// import identityCommitments from "../public/identityCommitments.json";
import path from "path"

describe.only("tree", () => {
  it("should get root", () => {
    const tree = new IncrementalMerkleTree(poseidon, 20, BigInt(0), 2);
    const identityCommitments = [0,4,8,12,1,5,9,13,2,6,10,14,3,7,11,15]
    for (const identityCommitment of identityCommitments) {
      tree.insert(identityCommitment.toString());
    }
    console.log(tree.root)
    }
  )
})


describe("VotersDemo", function () {
  let contract: Contract;
  //   let contractOwner: Signer;
  const zkeyFiles = "./public"
  const wasmFilePath = path.join(zkeyFiles, "semaphore.wasm")
  const finalZkeyPath = path.join(zkeyFiles, "semaphore_final.zkey")

  before(async () => {
    contract = await run("deploy", { logs: false });

    // const signers = await ethers.getSigners();
    // contractOwner = signers[0];
  });

  describe("# getRatingAllExpensive", () => {
    it("Should return an array", async () => {
      const res = await contract.getRatingAllExpensive(0);
      console.log(res);
    });
  });

  describe("# getProposalsAllExpensive before", () => {
    it("Should return an array", async () => {
      const res = await contract.getProposalsAllExpensive(1);
      console.log(res);
    });
  });

  describe.skip("#vote", () => {
    it("Should vote on proposal", async () => {
      const choice = [
        "0",
        "0x7a6b47616d657300000000000000000000000000000000000000000000000000",
      ];
      const userId = "896030624375250984";
      const identity = new ZkIdentity(Strategy.MESSAGE, userId);
      const identityCommitment = identity.genIdentityCommitment();
      console.log("identityCommitment", identityCommitment.toString());

        const provider = new providers.JsonRpcProvider();
        const signer = provider.getSigner();
        console.log("identityCommitment", identityCommitment.toString());
        let leavesBytes32 = await contract.getLeaves();
        let identityCommitments = parseIdArr(leavesBytes32);
        console.log("identityCommitments", identityCommitments);
        const leavesBool = identityCommitments.map(
          (leaf: string) => identityCommitment.toString() === leaf
        );
        if (!leavesBool.includes(true)) {
          
          const identityArr = formatId(identityCommitment);
          
          let tx = await contract.addLeaf(identityArr);
          let receipt = await tx.wait();
          console.log("receipt is", receipt);
          leavesBytes32 = await contract.getLeaves();
          identityCommitments = parseIdArr(leavesBytes32);
          const tree = new IncrementalMerkleTree(poseidon, 20, BigInt(0), 2);
    
        for (const identityCommitment of identityCommitments) {
          tree.insert(identityCommitment.toString());
        }
        }


      const merkleProof = generateMerkleProof(
        20,
        BigInt(0),
        identityCommitments,
        identityCommitment.toString()
      );
      const vote = choice[1];
      const shortenedVote = choice[1].slice(0, -50);
      const witness = Semaphore.genWitness(
        identity.getTrapdoor(),
        identity.getNullifier(),
        merkleProof,
        merkleProof.root,
        shortenedVote
      );
      const root = merkleProof.root.toString();
      const { proof, publicSignals } = await Semaphore.genProof(
        witness,
        wasmFilePath,
        finalZkeyPath
      );
      const solidityProof = Semaphore.packToSolidityProof(proof);
      const strIdentityCommitment = identityCommitment.toString();

      const nullifierHash = publicSignals.nullifierHash;
      const res = await contract.vote(
        1,
        vote,
        utils.formatBytes32String(shortenedVote),
        BigInt(root),
        nullifierHash,
        solidityProof
      );

      // console.log(res);
    });


      it("Should return user rating", async () => {
        const res = await contract.getProposalsAllExpensive(1);
        console.log(res);
      });

    //   it("Should raise rating", async () => {
    //     const res = await contract.getProposalsAllExpensive(1);
    //     console.log(res);
    
    // });
  });
});
